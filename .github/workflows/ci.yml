# Matter Platform CI Pipeline v1.0
# Implements comprehensive continuous integration for frontend and backend components
# with security scanning, performance testing and code quality analysis

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  NODE_ENV: 'test'
  PYTHON_ENV: 'test'

jobs:
  frontend-build:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package.json
          
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: src/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('src/web/package-lock.json') }}
          
      - name: Install Dependencies
        working-directory: src/web
        run: npm ci
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Type Check
        working-directory: src/web
        run: npm run type-check
        
      - name: Lint
        working-directory: src/web
        run: |
          npm run lint
          npm run prettier:check
          
      - name: Unit Tests
        working-directory: src/web
        run: npm run test:coverage
        
      - name: Integration Tests
        working-directory: src/web
        run: npm run test:integration
        
      - name: Build
        working-directory: src/web
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Analyze Bundle
        working-directory: src/web
        run: npm run analyze-bundle

  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('src/backend/poetry.lock') }}
          
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.create false
          
      - name: Install Dependencies
        working-directory: src/backend
        run: poetry install
        
      - name: Type Check
        working-directory: src/backend
        run: poetry run mypy .
        
      - name: Code Style
        working-directory: src/backend
        run: |
          poetry run black . --check
          poetry run flake8 .
          
      - name: Unit Tests
        working-directory: src/backend
        run: poetry run pytest --cov
        
      - name: Integration Tests
        working-directory: src/backend
        run: poetry run pytest tests/integration
        env:
          PYTHON_ENV: test
          
      - name: Security Check
        working-directory: src/backend
        run: poetry run bandit -r .
        
      - name: Build Packages
        working-directory: src/backend
        run: poetry build

  security:
    name: Security Analysis
    needs: [frontend-build, backend-build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Node.js Security Scan
        uses: snyk/actions/node@v1
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Python Security Scan
        uses: snyk/actions/python@v1
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  performance:
    name: Performance Testing
    needs: [security]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Setup k6
        uses: grafana/k6-action@v0.3
        
      - name: Run Load Tests
        run: k6 run tests/performance/load-test.js
        
      - name: Validate Performance
        run: |
          echo "Validating performance metrics against SLA requirements"
          # Custom script to validate performance test results
          node scripts/validate-performance.js
        
      - name: Generate Reports
        run: |
          echo "Generating performance test reports"
          # Custom script to generate performance reports
          node scripts/generate-performance-report.js

  deploy-staging:
    name: Deploy to Staging
    needs: [performance]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
      - name: Trigger Staging Deployment
        run: |
          echo "Triggering staging deployment pipeline"
          # Deployment steps would go here
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}