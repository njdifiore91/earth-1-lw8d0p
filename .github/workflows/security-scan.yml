# Security scanning workflow for Matter satellite data platform
# Version: 1.0.0
# Implements comprehensive security testing including static analysis, dependency scanning,
# container security, and secret detection

name: Security Scan

on:
  push:
    branches: ['main', 'develop']
  pull_request:
    types: [opened, synchronize]
  schedule:
    - cron: '0 0 * * 0'  # Weekly scan on Sundays

env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  codeql-scan:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript, python
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript,typescript,python"
          upload-database: true
          output: sarif-results
          fail-on: critical,high

  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: codeql-scan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Node.js Dependency Scan
        uses: snyk/actions/node@v0.4.0
        with:
          args: --severity-threshold=high
          fail-on: critical
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}

      - name: Python Dependency Scan
        uses: snyk/actions/python@v0.4.0
        with:
          args: --severity-threshold=high
          fail-on: critical
        env:
          SNYK_TOKEN: ${{ env.SNYK_TOKEN }}

      - name: Upload Dependency Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: snyk-results.json
          retention-days: 30

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.10.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@0.10.0
        with:
          scan-type: 'image'
          image-ref: 'matter-platform'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'container-security'

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    needs: container-scan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run secret scanning
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          format: sarif
          report-path: gitleaks-report.sarif
          fail-on: high
          verbose: true
        env:
          GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

      - name: Upload secret scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: gitleaks-report.sarif
          category: 'secret-detection'

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [codeql-scan, dependency-scan, container-scan, secret-scan]
    if: always()

    steps:
      - name: Download scan results
        uses: actions/download-artifact@v3
        with:
          path: security-results

      - name: Generate consolidated report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## Scan Summary" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-scan.result }}" >> security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Secret Detection: ${{ needs.secret-scan.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: security-report
    if: failure()

    steps:
      - name: Send notification
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security Scan Failures Detected',
              body: 'Security scan workflow has detected critical or high severity issues. Please review the security report.',
              labels: ['security', 'high-priority']
            });