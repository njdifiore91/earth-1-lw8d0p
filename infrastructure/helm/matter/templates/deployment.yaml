{{- define "matter.deployment" -}}
{{- $service := .service -}}
{{- $region := .region -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "matter.fullname" . }}-{{ $service.name }}-{{ $region }}
  labels:
    {{- include "matter.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ $service.name }}
    region: {{ $region }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    prometheus.io/scrape: "{{ $service.monitoring.enabled }}"
    prometheus.io/port: "{{ $service.ports.metrics }}"
spec:
  replicas: {{ $service.replicas.min }}
  selector:
    matchLabels:
      {{- include "matter.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ $service.name }}
      region: {{ $region }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        {{- include "matter.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ $service.name }}
        region: {{ $region }}
      annotations:
        prometheus.io/scrape: "{{ $service.monitoring.enabled }}"
        prometheus.io/port: "{{ $service.ports.metrics }}"
    spec:
      serviceAccountName: {{ include "matter.serviceAccountName" $service.name }}
      securityContext:
        {{- include "matter.podSecurityContext" . | nindent 8 }}
      terminationGracePeriodSeconds: 60
      containers:
        - name: {{ $service.name }}
          image: "{{ .Values.global.image.registry }}/{{ $service.image.repository }}:{{ $service.image.tag | default .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          ports:
            - name: http
              containerPort: {{ $service.ports.http }}
              protocol: TCP
            - name: metrics
              containerPort: {{ $service.ports.metrics }}
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REGION
              value: {{ $region }}
            {{- range $key, $value := $service.env }}
            - name: {{ $key }}
              {{- if $value.value }}
              value: {{ $value.value | quote }}
              {{- else if $value.secretKeyRef }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.secretKeyRef.name }}
                  key: {{ $value.secretKeyRef.key }}
              {{- end }}
            {{- end }}
          resources:
            {{- toYaml $service.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: {{ $service.healthCheck.path }}
              port: {{ $service.healthCheck.port }}
            initialDelaySeconds: {{ $service.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ $service.healthCheck.periodSeconds }}
            failureThreshold: {{ $service.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ $service.healthCheck.path }}
              port: {{ $service.healthCheck.port }}
            initialDelaySeconds: {{ add $service.healthCheck.initialDelaySeconds 10 }}
            periodSeconds: {{ $service.healthCheck.periodSeconds }}
            failureThreshold: {{ $service.healthCheck.failureThreshold }}
          startupProbe:
            httpGet:
              path: {{ $service.healthCheck.path }}
              port: {{ $service.healthCheck.port }}
            failureThreshold: 30
            periodSeconds: 10
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            {{- if .Values.global.ingress.tls.enabled }}
            - name: certs
              mountPath: /etc/certs
              readOnly: true
            {{- end }}
      volumes:
        - name: tmp
          emptyDir: {}
        {{- if .Values.global.ingress.tls.enabled }}
        - name: certs
          secret:
            secretName: {{ include "matter.tlsSecretName" $service.name }}
        {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - {{ $service.name }}
                  - key: region
                    operator: In
                    values:
                      - {{ $region }}
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: topology.kubernetes.io/region
                    operator: In
                    values:
                      - {{ $region }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: {{ $service.name }}
              region: {{ $region }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}